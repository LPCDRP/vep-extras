#!/usr/bin/env python

try:
    import configargparse as argparse
except ImportError:
    import argparse
import sys

def parse_vep(infile):

    for line in infile:
        print_me,print_me_2,print_me_3="","",""
        to_print=[]
        distances=[]
        
        info_per_line=[]
        shortest_upstream=""
        columns = line.split()
        if "#" in line:
            sys.stdout.write(line)     
        if "#" not in line and len(columns) > 7:
            gene = "1"
            position= columns[1]
            ID=columns[2]
            ref=columns[3]
            alt=columns[4]
            qual=columns[5]
            PASS=columns[6]
            infos=columns[7]
            CSQs=infos.split('CSQ=')
            print_me_first=[gene,position,ID,ref,alt,qual,PASS,CSQs[0]+"CSQ="]
            CSQ=str(CSQs[1]).split(',')
            same_variant=len(CSQ)

            for dd in CSQ:
                i= dd.split('|')
                distances.append(i)
                # Allele|Consequence|IMPACT|SYMBOL|Gene|Feature_type|Feature|BIOTYPE|EXON|INTRON|HGVSc|HGVSp|cDNA_position|CDS_position|Protein_position|Amino_acids|Codons|Existing_variation|DISTANCE|STRAND|FLAGS|PICK|VARIANT_CLASS|SYMBOL_SOURCE|HGNC_ID

                Consequence=i[1]
                IMPACT=i[2]
                DISTANCE=i[18]
                PICK=i[21]
                STRAND=i[19]
                myInfo = "|".join(i)
                
                #if it's in a gene:
                if "downstream_gene_variant" not in Consequence and "upstream_gene_variant" not in Consequence: 
                        print_me=str(myInfo) 
                        to_print.append(print_me)
            
            d= sorted([x for x in distances if "upstream_gene_variant" in x[1]], key=lambda dis: int(dis[18]) )
            # ^ If upstream, sort by distance into an array d, the first element would be the one with the shortest distance
            if len(d)>0:
                shortest_upstream=d[0] 
                if len(d)>1:
                    second_shortest=d[1]

            if shortest_upstream:
                print_me_2=str("|".join(shortest_upstream))
                to_print.append(print_me_2)
                if str(shortest_upstream[19]) != str(second_shortest[19]): # check if the strands are the same orientation or if one is reversed, only print if reverese 
                    print_me_3=str("|".join(second_shortest))
                    to_print.append(print_me_3)
            print str(('\t'.join(print_me_first)))  + ','.join(map(str, to_print))

if __name__ == "__main__":

    Allele,Consequence,IMPACT,SYMBOL,Gene,Feature_type,Feature,BIOTYPE,EXON,INTRON,HGVSc,HGVSp,cDNA_position,CDS_position,Protein_position,Amino_acids,Codons,Existing_variation,DISTANCE,STRAND,FLAGS,PICK,VARIANT_CLASS,SYMBOL_SOURCE,HGNC_ID=['']*25

    parser = argparse.ArgumentParser()
    parser.add_argument('infile',
                        nargs='?',
                        type=argparse.FileType('r'),
                        default=sys.stdin)
    arguments = parser.parse_args()

    parse_vep(arguments.infile)
